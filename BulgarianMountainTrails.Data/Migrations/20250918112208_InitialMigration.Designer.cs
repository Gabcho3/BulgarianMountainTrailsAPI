// <auto-generated />
using System;
using BulgarianMountainTrails.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BulgarianMountainTrails.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918112208_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Hut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Altitude")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Mountain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Huts");
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.PointOfInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Mountain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PointsOfInterest", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Trail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<double>("DurationHours")
                        .HasColumnType("float");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LengthKm")
                        .HasColumnType("float");

                    b.Property<string>("Mountain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trails");
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.TrailHut", b =>
                {
                    b.Property<Guid>("TrailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrailId", "HutId");

                    b.HasIndex("HutId");

                    b.ToTable("TrailHuts");
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.TrailPOI", b =>
                {
                    b.Property<Guid>("TrailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PointOfInterestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrailId", "PointOfInterestId");

                    b.HasIndex("PointOfInterestId");

                    b.ToTable("TrailPOIs");
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Cave", b =>
                {
                    b.HasBaseType("BulgarianMountainTrails.Data.Entities.PointOfInterest");

                    b.Property<bool>("IsTouristAccessible")
                        .HasColumnType("bit");

                    b.Property<double>("LengthM")
                        .HasColumnType("float");

                    b.ToTable("Caves", (string)null);
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Lake", b =>
                {
                    b.HasBaseType("BulgarianMountainTrails.Data.Entities.PointOfInterest");

                    b.Property<double>("AreaKm2")
                        .HasColumnType("float");

                    b.Property<double>("DepthM")
                        .HasColumnType("float");

                    b.ToTable("Lakes", (string)null);
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Monastery", b =>
                {
                    b.HasBaseType("BulgarianMountainTrails.Data.Entities.PointOfInterest");

                    b.Property<int>("FoundedYear")
                        .HasColumnType("int");

                    b.ToTable("Monasteries", (string)null);
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Peak", b =>
                {
                    b.HasBaseType("BulgarianMountainTrails.Data.Entities.PointOfInterest");

                    b.Property<int>("ElevationM")
                        .HasColumnType("int");

                    b.ToTable("Peaks", (string)null);
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.River", b =>
                {
                    b.HasBaseType("BulgarianMountainTrails.Data.Entities.PointOfInterest");

                    b.Property<double>("LengthKm")
                        .HasColumnType("float");

                    b.ToTable("Rivers", (string)null);
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Waterfall", b =>
                {
                    b.HasBaseType("BulgarianMountainTrails.Data.Entities.PointOfInterest");

                    b.Property<double>("HeightM")
                        .HasColumnType("float");

                    b.ToTable("Waterfalls", (string)null);
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.TrailHut", b =>
                {
                    b.HasOne("BulgarianMountainTrails.Data.Entities.Hut", "Hut")
                        .WithMany("TrailHuts")
                        .HasForeignKey("HutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BulgarianMountainTrails.Data.Entities.Trail", "Trail")
                        .WithMany("TrailHuts")
                        .HasForeignKey("TrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hut");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.TrailPOI", b =>
                {
                    b.HasOne("BulgarianMountainTrails.Data.Entities.PointOfInterest", "PointOfInterest")
                        .WithMany()
                        .HasForeignKey("PointOfInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BulgarianMountainTrails.Data.Entities.Trail", "Trail")
                        .WithMany("TrailPOIs")
                        .HasForeignKey("TrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointOfInterest");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Cave", b =>
                {
                    b.HasOne("BulgarianMountainTrails.Data.Entities.PointOfInterest", null)
                        .WithOne()
                        .HasForeignKey("BulgarianMountainTrails.Data.Entities.Cave", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Lake", b =>
                {
                    b.HasOne("BulgarianMountainTrails.Data.Entities.PointOfInterest", null)
                        .WithOne()
                        .HasForeignKey("BulgarianMountainTrails.Data.Entities.Lake", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Monastery", b =>
                {
                    b.HasOne("BulgarianMountainTrails.Data.Entities.PointOfInterest", null)
                        .WithOne()
                        .HasForeignKey("BulgarianMountainTrails.Data.Entities.Monastery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Peak", b =>
                {
                    b.HasOne("BulgarianMountainTrails.Data.Entities.PointOfInterest", null)
                        .WithOne()
                        .HasForeignKey("BulgarianMountainTrails.Data.Entities.Peak", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.River", b =>
                {
                    b.HasOne("BulgarianMountainTrails.Data.Entities.PointOfInterest", null)
                        .WithOne()
                        .HasForeignKey("BulgarianMountainTrails.Data.Entities.River", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Waterfall", b =>
                {
                    b.HasOne("BulgarianMountainTrails.Data.Entities.PointOfInterest", null)
                        .WithOne()
                        .HasForeignKey("BulgarianMountainTrails.Data.Entities.Waterfall", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Hut", b =>
                {
                    b.Navigation("TrailHuts");
                });

            modelBuilder.Entity("BulgarianMountainTrails.Data.Entities.Trail", b =>
                {
                    b.Navigation("TrailHuts");

                    b.Navigation("TrailPOIs");
                });
#pragma warning restore 612, 618
        }
    }
}
